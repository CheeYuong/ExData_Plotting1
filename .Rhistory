[10]
url<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
SST<-read.fwf(url,widths=c(12,7,4,9,4,9,4,9,4),skip=4)
hear(SST)
head(SST)
tail(SST)
sum(SST[4])
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
typepackageVersion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
select(.data)
?select
select(cran,ip_id,package,country)
5:20
select(can,r_arch:country)
select(cran,r_arch:country)
select(cran,r_arch:country,reverseOrder=TRUE)
select(cran,r_arch:country,reverseorder=TRUE)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(-(cran))
select(-(x:size))
select(cran,-(x:size))
select(cran,-x:size)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.1", country == "US")
filter(cran, r_version <= "3.0.2", country == "US")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,country == "US" | country == "IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na())
filter(cran,!is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,asc(country),desc(r_version),asc(ip_id))
arrange(cran2,country,desc(r_version),ip_id)
select(cran2,ip_id,package,size)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_gb=size_mb/2^20)
mutate(cran3,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^10,size_gb=size_mb/2^10)
mutate(cran3,size_mb=size/2^10,size_gb=size_mb/2^10)
Use mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,correct_size)
mutate(cran3,correct_size = size - 1000)
mutate(cran3,correct_size = size + 1000)
summarize(cran,avg_bytes=mean(size))
mydf<-read.csv(path2csv)
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == "swirl")
filter(cran,r_version == "3.1.1", country == "US")
)
filter(cran,r_version == "3.1.1", country == "US")
?Comparison
filter(cran,r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran,size>100500,r_os=="linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3,correct_size == size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <-tbl_df(mydf)
rm("mydf")
cran
groupby(cran)
?group_by()
?group_by
by_package
by_package<-group_by(cran,package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
submit()
submit(summarize)
submit()
reset()
reset()
info()
save()
summarize(by_package,mean(size))
submit()
submit()
submit()
print(tbl,pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(by_package,pack_sum>679)
top_counts<-filter(by_package , pack_sum > 679)
top_counts<-filter(by_package , pack_sum$count > 679)
top_counts<-filter(pack_sum, count > 679)
top_counts
View()
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
view()
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-filter(pack_sum,desc(unique))
top_unique_sorted<-filter(pack_sum,desc(top_unique))
top_unique_sorted<-filter(pack_sum, desc(top_unique))
top_unique_sorted<-arrange(pack_sum, desc(unique))
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_counts_sorted)
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
swirl()
library (tidyr)
students
gather()
?gather
gather(students,sex,count,-grade)
students2
res<-gather(sex_class,grade)
res<-gather(student,sex_class)
sex_class<-gather(male_1,female_1,male_2,female_2)
res<-gather(sex_class,value)
res<-gather(sex_class,count)
res<-gather(sex,count)
res<-gather(male_1,female_1,male_2,female_2,count)
?gather
gather(sex,count)
students2
res<-gther(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
separate()
separate(sex_class)
?separate
separate(res,col)
separate(c("sex","class"))
separate(res,sex_class,c("sex","class"))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
reset()
submit()
students3
submit()
submit()
submit()
?gather
submit()
submit()
?spread
submit()
submit()
reset()
reset()
reset()
reset()
submit()
submit()
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?unique
submit()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
mutate(status=passed)
mutate(status, passed)
mutate(passed,status)
passed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed,failed)
sat
?separate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day
today(this_day)
this_day<-today()
this_day
this_day
this_day<-year()
this_day<-day()
this_day<-day(today())
year()<-this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment<-now(this_day)
this_moment<-now(date-times)
this_moment<-now(this_day)
this_moment
second(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
ymd("1975-3-12")
mdy("March 12, 1975")
mdy("25081985")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("January 2, 1920")
ymd("January 2, 1920")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
tmd("03:22:14")
ymd("03:22:14")
hms("03:22:14")
dt2
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc<-now(tzone = "America/New_York")
nyc
depart<-nyc + days(2)
depart
update(depart,hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- update(depart, hours = 15, minutes = 50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <-with_tz(arrive,tzone = "Asia/Hong_Kong")
arrive
last_time<-update("June 17, 2008")
last_time<-update(arrive,"June 17, 2008")
last_time<-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long<-new_interval(arrive,last_time)
how_long<-new_interval(last_time,arrive)
as.period(how_long)
sopwatch()
stopwatch()
library(swirl)
library(swirl)
install_course_directory("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_course_directory("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
?par
par("bg")
par("mar")
x<-rnorm(100)
hist(x)
x<-rnorm(100)
hist(x)
example(points)
?Devices
install.packages("lattice")
install.packages("ggplot2")
?pch
example(points)
setwd('C:/Users/user/Desktop/datascience/ExploratoryDataAnalysis')
getwd()
unzip("exdata-data-household_power_consumption.zip",exdir="Household Power Consumption")
# Data path
path <- 'C:/Users/user/Desktop/datascience/ExploratoryDataAnalysis/Household Power Consumption'
Full_Data <- read.table(file.path(path, "household_power_consumption.txt"),header =TRUE, sep = ";",na.strings = "?")
head(Full_Data)
str(Full_Data)
subset_date<- Full_Data[Full_Data$Date %in% c("1/2/2007","2/2/2007"),]
str(subset_date)
head(subset_date)
subset_DateTime <-strptime(paste(subset_date$Date, subset_date$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
str(subset_DateTime)
Final_Data <- cbind(subset_DateTime, subset_date)
#Plot 1
png("plot1.png", width=480, height=480, type = "windows")
hist(Final_Data$Global_active_power,col="red",main =" Global Active Power",xlab="Global Active Power (kilowatts)")
dev.off()
setwd('C:/Users/user/Desktop/datascience/ExploratoryDataAnalysis')
getwd()
path <- 'C:/Users/user/Desktop/datascience/ExploratoryDataAnalysis/Household Power Consumption'
Full_Data <- read.table(file.path(path, "household_power_consumption.txt"),header =TRUE, sep = ";",na.strings = "?")
head(Full_Data)
str(Full_Data)
subset_date<- Full_Data[Full_Data$Date %in% c("1/2/2007","2/2/2007"),]
str(subset_date)
head(subset_date)
subset_DateTime <-strptime(paste(subset_date$Date, subset_date$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
str(subset_DateTime)
Final_Data <- cbind(subset_DateTime, subset_date)
#Plot 2
png("plot2.png", width=480, height=480, type = "windows")
plot(Final_Data$subset_DateTime,Final_Data$Global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
dev.off()
path <- 'C:/Users/user/Desktop/datascience/ExploratoryDataAnalysis/Household Power Consumption'
Full_Data <- read.table(file.path(path, "household_power_consumption.txt"),header =TRUE, sep = ";",na.strings = "?")
head(Full_Data)
str(Full_Data)
subset_date<- Full_Data[Full_Data$Date %in% c("1/2/2007","2/2/2007"),]
str(subset_date)
head(subset_date)
subset_DateTime <-strptime(paste(subset_date$Date, subset_date$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
str(subset_DateTime)
Final_Data <- cbind(subset_DateTime, subset_date)
#Plot 3
png(file = "plot3.png", width = 480, height=480, type="windows")
labels<- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(Final_Data$subset_DateTime,Final_Data$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(Final_Data$subset_DateTime,Final_Data$Sub_metering_2,col="red")
lines(Final_Data$subset_DateTime,Final_Data$Sub_metering_3,col="blue")
legend("topright", legend=labels,col=c("black","red","blue"),pch = "-")
dev.off()
path <- 'C:/Users/user/Desktop/datascience/ExploratoryDataAnalysis/Household Power Consumption'
Full_Data <- read.table(file.path(path, "household_power_consumption.txt"),header =TRUE, sep = ";",na.strings = "?")
head(Full_Data)
str(Full_Data)
subset_date<- Full_Data[Full_Data$Date %in% c("1/2/2007","2/2/2007"),]
str(subset_date)
head(subset_date)
subset_DateTime <-strptime(paste(subset_date$Date, subset_date$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
str(subset_DateTime)
Final_Data <- cbind(subset_DateTime, subset_date)
#Plot 4
png(file = "plot4.png", width = 480, height=480, type="windows")
par(mfrow=c(2,2))
with(FinalData,{
plot(subset_DateTime, Global_active_power,type="l", xlab="",ylab="Global Active Power")
plot(subset_DateTime, Voltage, type="l",xlab="datetime",ylab="Voltage")
labels<- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(Final_Data$subset_DateTime,Final_Data$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(Final_Data$subset_DateTime,FinalData$Sub_metering_2,col="red")
lines(Final_Data$subset_DateTime,FinalData$Sub_metering_3,col="blue")
legend("topright", legend=labels,col=c("black","red","blue"),pch = "-")
plot(subset_DateTime, Global_reactive_power,type="l",xlab="datetime",ylab="Global_Reactive_Power")
})
with(Final_Data,{
plot(subset_DateTime, Global_active_power,type="l", xlab="",ylab="Global Active Power")
plot(subset_DateTime, Voltage, type="l",xlab="datetime",ylab="Voltage")
labels<- c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
plot(Final_Data$subset_DateTime,Final_Data$Sub_metering_1,type="l",col="black",xlab="",ylab="Energy sub metering")
lines(Final_Data$subset_DateTime,Final_Data$Sub_metering_2,col="red")
lines(Final_Data$subset_DateTime,Final_Data$Sub_metering_3,col="blue")
legend("topright", legend=labels,col=c("black","red","blue"),pch = "-")
plot(subset_DateTime, Global_reactive_power,type="l",xlab="datetime",ylab="Global_Reactive_Power")
})
dev.off()
